{
	"website" : {
		"robots.txt" : "",
		".gitignore" : "vendor/\n.sass-cache/\nmain.css.map\nimages/\n_extra/",
		"assets" : {
			"css" : {
				"scss" : {
					"main.scss" : "|!copyright!|\n\n@charset \"utf-8\";\n\n@import url(http://fonts.googleapis.com/css?family=Roboto:500);\n\n@import \"mixins.scss\";\n\n* {\n\tmargin: 0;\n\tpadding: 0;\n\n\tfont-size: 20px;\n\n\t@include box-sizing(border-box);\n}\n\nimg {\n\tborder: 0;\n}\n\n#container {\n\tposition: absolute;\n\n\twidth: 100%;\n\theight: 100%;\n}",
					"mixins.scss" : "@mixin box-sizing($value) {\n\t-webkit-box-sizing: $value;\n\t-moz-box-sizing: $value;\n\t-ms-box-sizing: $value;\n\tbox-sizing: $value;\n}\n\n@mixin user-select($value) {\n\t-webkit-user-select: $value;\n\t-moz-user-select: $value;\n\t-ms-user-select: $value;\n\tuser-select: $value;\n}\n\n@mixin translate($x, $y) {\n\t-webkit-transform: translate($x, $y);\n\t-moz-transform: translate($x, $y);\n\t-ms-transform: translate($x, $y);\n\t-o-transform: translate($x, $y);\n\ttransform: translate($x, $y);\n}\n\n@mixin rotate($angle) {\n\t-webkit-transform: rotate($angle);\n\t-moz-transform: rotate($angle);\n\t-ms-transform: rotate($angle);\n\t-o-transform: rotate($angle);\n\ttransform: rotate($angle);\n}\n\n@mixin border-radius($value) {\n\t-webkit-border-radius: $value;\n\t-moz-border-radius: $value;\n\tborder-radius: $value;\n}"
				}
			},
			"js" : {
				"main.js" : "|!copyright!|\n\n// runs at page loaded and sets all the necessary global variables and function calls\nfunction init() {}"
			},
			"images" : {}
		},
		"DB" : {},
		"release" : {
			"code" : {
				"ajax_files" : {},
				"aux_pages" : {},
				"classes" : {
					"DB.php" : "<?php\n|!copyright!|\n\nclass DB {\n\t// DB connection information\n\tpublic static $db_name = \"\";\n\tpublic static $db_user = \"\";\n\tpublic static $db_pw = \"\";\n\n\t// stores the only instance of the DB class\n\tprivate static $instance = null;\n\n\t// stores the PDO instance\n\tprivate $pdo_obj = null;\n\n\tprivate function __construct() {\n\t\t// create a connection to the DB and store it\n\t\ttry {\n\t\t\t$this->pdo_obj = new PDO(\"mysql:host=localhost;dbname=\".self::$db_name, self::$db_user, self::$db_pw);\n\t\t}catch (PDOException $e) {\n\t\t\t// couldn't connect to DB\n\t\t\treturn;\n\t\t}\n\t}\n\n\t// returns the DB connection\n\t// if one doesn't exist, then a connection will be created\n\tpublic static function getInstance() {\n\t\t// if a DB connection hasn't been created\n\t\tif (self::$instance == null) {\n\t\t\t// create a DB instance and store it\n\t\t\t$new_instance = new self;\n\n\t\t\t// if an instance was successfuly created, store it\n\t\t\tif ($new_instance->pdo_obj !== null) {\n\t\t\t\tself::$instance = $new_instance;\n\t\t\t}\n\t\t}\n\n\t\treturn(self::$instance);\n\t}\n\n\t// begins a transaction\n\t// returns True if successful or False otherwise\n\tpublic function beginTransaction() {\n\t\ttry {\n\t\t\treturn((bool)$this->pdo_obj->beginTransaction());\n\t\t}catch (PDOException $e) {\n\t\t\treturn(false);\n\t\t}\n\t}\n\n\t// commits a transaction\n\t// returns True if successful or False otherwise\n\tpublic function commit() {\n\t\ttry {\n\t\t\t// check if there is an open transaction\n\t\t\tif (!(bool)$this->pdo_obj->inTransaction()) {\n\t\t\t\t// there isn't an open transition\n\t\t\t\treturn(true);\n\t\t\t}\n\n\t\t\treturn((bool)$this->pdo_obj->commit());\n\t\t}catch (PDOException $e) {\n\t\t\treturn(false);\n\t\t}\n\t}\n\n\t// rollback a transaction\n\t// returns True if successful or False otherwise\n\tpublic function rollBack() {\n\t\ttry {\n\t\t\t// check if there is an open transaction\n\t\t\tif (!(bool)$this->pdo_obj->inTransaction()) {\n\t\t\t\t// there isn't an open transition\n\t\t\t\treturn(true);\n\t\t\t}\n\n\t\t\treturn((bool)$this->pdo_obj->rollBack());\n\t\t}catch (PDOException $e) {\n\t\t\treturn(false);\n\t\t}\n\t}\n\n\t// prepares and runs a SELECT query\n\t// returns all query's results, as an assoc array\n\tpublic function querySelect($query, array $input_params) {\n\t\ttry {\n\t\t\t// prepare the query\n\t\t\t$pdo_statement = $this->pdo_obj->prepare($query);\n\n\t\t\tif ($pdo_statement === false) {\n\t\t\t\t// the query couldn't be prepared\n\t\t\t\treturn([]);\n\t\t\t}\n\n\t\t\t// execute the query\n\t\t\tif (!$pdo_statement->execute($input_params)) {\n\t\t\t\t// the query couldn't be executed\n\t\t\t\treturn([]);\n\t\t\t}\n\n\t\t\t// check if a game was found\n\t\t\tif ($pdo_statement->rowCount() === 0) {\n\t\t\t\t// it wasn't\n\t\t\t\treturn([]);\n\t\t\t}\n\n\t\t\t// fetch the results\n\t\t\t$pdo_results = $pdo_statement->fetchAll(PDO::FETCH_ASSOC);\n\n\t\t\tif ($pdo_results === false) {\n\t\t\t\t// failed to fetch results\n\t\t\t\treturn([]);\n\t\t\t}\n\n\t\t\t// at this point everything should have gone OK\n\t\t\treturn($pdo_results);\n\t\t}catch (PDOException $e) {\n\t\t\treturn([]);\n\t\t}\n\t}\n\n\t// prepares and runs an INSERT query\n\t// returns the IDs of the inserted rows\n\tpublic function queryInsert($query, array $input_params) {\n\t\ttry {\n\t\t\t// prepare the query\n\t\t\t$pdo_statement = $this->pdo_obj->prepare($query);\n\n\t\t\tif ($pdo_statement === false) {\n\t\t\t\t// the query couldn't be prepared\n\t\t\t\treturn([]);\n\t\t\t}\n\n\t\t\t// stores the inserted IDs\n\t\t\t$inserted_ids = [];\n\n\t\t\t// loop through each $input_params element\n\t\t\tforeach ($input_params as $params) {\n\t\t\t\t// execute the query\n\t\t\t\tif (!$pdo_statement->execute($params)) {\n\t\t\t\t\t// the query couldn't be executed\n\t\t\t\t\t$inserted_ids[] = null;\n\t\t\t\t}\n\n\t\t\t\t// store the inserted ID\n\t\t\t\t$inserted_ids[] = $this->pdo_obj->lastInsertId();\n\t\t\t}\n\n\t\t\t// return the inserted IDs\n\t\t\treturn($inserted_ids);\n\t\t}catch (PDOException $e) {\n\t\t\treturn([]);\n\t\t}\n\t}\n\n\t// prepares and runs an UPDATE query\n\t// returns the number of updated rows\n\tpublic function queryUpdate($query, array $input_params) {\n\t\ttry {\n\t\t\t// prepare the query\n\t\t\t$pdo_statement = $this->pdo_obj->prepare($query);\n\n\t\t\tif ($pdo_statement === false) {\n\t\t\t\t// the query couldn't be prepared\n\t\t\t\treturn([]);\n\t\t\t}\n\n\t\t\t// stores the number of updated rows\n\t\t\t$num_updated_rows = 0;\n\n\t\t\t// loop through each $input_params element\n\t\t\tforeach ($input_params as $params) {\n\t\t\t\t// execute the query\n\t\t\t\tif ($pdo_statement->execute($params)) {\n\t\t\t\t\t// the query was executed\n\t\t\t\t\t$num_updated_rows++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// return the number of updated rows\n\t\t\treturn($num_updated_rows);\n\t\t}catch (PDOException $e) {\n\t\t\treturn([]);\n\t\t}\n\t}\n}\n\n?>",
					"General.php" : "<?php\n|!copyright!|\n\nclass General {\n\t// defines the PUBLIC_ROOT constant, containing the path to the project's public directory\n\t// i.e., the browser's root directory\n\tstatic function definePublicRoot($public_file_abs_path) {\n\t\t// make sure $public_file_abs_path ends with a backslash\n\t\tif (substr($public_file_abs_path, -1) !== \"\\\\\") {\n\t\t\t$public_file_abs_path .= \"\\\\\";\n\t\t}\n\n\t\t// work on building the path to the domain's public folder\n\t\t$public_file_abs_path = str_replace(\"/\", \"\\\\\", $public_file_abs_path);\n\n\t\t// find the name of the domain's public folder\n\t\t$public_folder_valid_names = [\"public_html\", \"www\"];\n\t\t$public_folder_positions = [];\n\t\tforeach ($public_folder_valid_names as $value) {\n\t\t\t$pos = strpos($public_file_abs_path, \"\\\\{$value}\\\\\");\n\n\t\t\tif ($pos === false) {\n\t\t\t\t// this folder name doesn't exist in the path\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$public_folder_positions[$value] = $pos;\n\t\t}\n\n\t\t// make sure at least 1 of them was found\n\t\tif (empty(array_count_values($public_folder_positions))) {\n\t\t\t// couldn't find the domain's public folder name\n\t\t\texit;\n\t\t}\n\n\t\t// find the folder that comes first in the path\n\t\t$public_folder_pos = min($public_folder_positions);\n\t\t$public_folder_name = array_search($public_folder_pos, $public_folder_positions);\n\n\t\t// find and store the path to the domain's public folder\n\t\tdefine(\"PUBLIC_ROOT\", substr($public_file_abs_path, 0, $public_folder_pos + strlen($public_folder_name) + 1));\n\t}\n\n\t// returns the provided path in the form to be used by the client's machine browser\n\tstatic function getClientPath($abs_path) {\n\t\t// make sure the path is using backslashs as the folder divisor\n\t\t$abs_path = str_replace(\"/\", \"\\\\\", $abs_path);\n\n\t\treturn(str_replace(\"\\\\\", \"/\", str_replace(PUBLIC_ROOT, \"\", $abs_path)));\n\t}\n}\n\n?>"
				},
				"interfaces" : {},
				"languages" : {},
				"templates" : {
					"init.php" : "<?php\n|!copyright!|\n\n// TODO: uncomment\n// error_reporting(0);"
				}
			},
			"logs" : {},
			"data" : {},
			"public_html" : {
				"ajax_files" : {},
				"assets" : {
					"css" : {},
					"js" : {},
					"images" : {}
				},
				"aux_pages" : {},
				"templates" : {
					"init.php" : "<?php\n|!copyright!|\n\n// define a constant with the path to the project's root directory\ndefine(\"PROJECT_ROOT\", dirname(dirname(dirname(__DIR__))));\n\n// autoload classes\nspl_autoload_register(function ($class_name) {\n\t// build the partial file path\n\t$path = PROJECT_ROOT.\"\\\\release\\\\code\\\\\";\n\n\t// try loading as a class\n\t$folder = \"classes\";\n\tif (file_exists($path.\"{$folder}\\\\{$class_name}.php\")) {\n\t\trequire_once($path.\"{$folder}\\\\{$class_name}.php\");\n\t}else{\n\t\t// try loading as an interface\n\t\t$folder = \"interfaces\";\n\t\trequire_once($path.\"{$folder}\\\\{$class_name}.php\");\n\t}\n});\n\n// define a constant with the path to the public directory\nGeneral::definePublicRoot(dirname(__FILE__));\n\nrequire_once(PROJECT_ROOT.\"\\\\release\\\\code\\\\templates\\\\init.php\");\n\n?>",
					"header.php" : "<?php\nsession_start();\n\n|!copyright!|\n\nrequire_once(dirname(__FILE__).\"\\\\init.php\");\n\n?>\n\n<!DOCTYPE html>\n<html>\n\n\t<head>\n\t\t<meta http-equiv='Content-Type' content='text/html; charset=utf-8' />\n\t\t<meta name='description' content='' />\n\t\t<meta name='keywords' content='' />\n\t\t<meta name='author' content='http://www.pedrojhenriques.com' />\n\t\t<meta name='copyright' content='' />\n\n\t\t<title></title>\n\n\t\t<link rel='icon' type='image/png' sizes='16x16' href='<?php echo(General::getClientPath(PUBLIC_ROOT.\"\\\\assets\\\\images\\\\favicon_16x16.png\")); ?>'/>\n\t\t<link rel='icon' type='image/png' sizes='32x32' href='<?php echo(General::getClientPath(PUBLIC_ROOT.\"\\\\assets\\\\images\\\\favicon_32x32.png\")); ?>'/>\n\t\t<link rel='icon' type='image/png' sizes='96x96' href='<?php echo(General::getClientPath(PUBLIC_ROOT.\"\\\\assets\\\\images\\\\favicon_96x96.png\")); ?>'/>\n\n\t\t<link rel='stylesheet' type='text/css' href='<?php echo(General::getClientPath(PUBLIC_ROOT.\"\\\\assets\\\\js\\\\joined.min.css\")); ?>'/>\n\t</head>\n\n\t<body>",
					"footer.php" : "<?php\n|!copyright!|\n\n?>\n\t\t<script src='<?php echo(General::getClientPath(PUBLIC_ROOT.\"\\\\assets\\\\js\\\\joined.min.js\")); ?>'></script>\n\t\t<script>init();</script>\n\t</body>\n\n</html>"
				},
				"index.php" : "<?php\n|!copyright!|\n\nrequire(dirname(__FILE__).\"\\\\templates\\\\header.php\");\n\n?>\n\n<div id='container'>\n\t\n</div>\n\n<?php require(PUBLIC_ROOT.\"\\\\templates\\\\footer.php\"); ?>",
				".htaccess" : "Options +FollowSymlinks\nRewriteEngine on\n\n#\n# no WWW rule\n#\n\nRewriteCond %{HTTP_HOST} ^|!no_www_domain!| [NC]\nRewriteRule ^(.*)$ http://www.|!no_www_domain!|/$1 [L,R=302]"
			}
		}
	},

	"ruby" : {
		".gitignore" : "vendor/\nimages/\n_extra/",
		"main.rb" : "|!copyright!|\n\nrequire \"#{File.dirname(__FILE__)}\\\\includes\\\\autoloader.rb\"\n\nbegin\n\t\nrescue Exception => e\n\tputs \"\\n\\r=> ERROR: #{e}\"\nend",
		"classes" : {},
		"data" : {},
		"includes" : {
			"autoloader.rb" : "|!copyright!|\n\n# load classes\ndir = Dir.new(\"#{File.dirname(File.dirname(__FILE__))}\\\\classes\")\ndir.each do |file|\n\tif file.match(/^(.|..)$/)\n\t\tnext\n\tend\n\n\trequire \"#{File.dirname(File.dirname(__FILE__))}\\\\classes\\\\#{file}\"\nend\ndir.close"
		}
	},

	"python" : {
		".gitignore" : "__pycache__/\nvendor/\nimages/\n_extra/",
		"main.py" : "|!copyright!|\n\nimport traceback\nfrom classes import Application\n\n# code that starts the entire application\ntry :\n\t# instantiate the application's main class\n\tapp = Application()\nexcept Exception as e :\n\ttraceback.print_exc()\n\tprint(\"\\n\")",
		"classes" : {
			"__init__.py" : "|!copyright!|\n\nimport os\n\n# list with the files to be imported when \"from package import *\" is called\n__all__ = []\n\n# grab the list of contents in this directory\ndir_path = os.path.dirname(os.path.realpath(__file__))\ndir_contents = os.listdir(dir_path)\n\n# find all the python files\nfor item in dir_contents :\n\t# ignore this file\n\tif (item == \"__init__.py\") :\n\t\tcontinue\n\n\t# check if this item is a file\n\tif (not os.path.isfile(dir_path + \"\\\\\" + item)) :\n\t\t# it's not a file, so ignore\n\t\tcontinue\n\n\t# check if it's a python file\n\tif (not item.endswith(\".py\")) :\n\t\t# it isn't, so ignore\n\t\tcontinue\n\n\t# at this point this item is a python file, so add it to __all__\n\t# not including the \".py\"\n\t__all__.append(item[:-3])",
			"Application.py" : "|!copyright!|\n\nclass Application :\n\t\"\"\"This is the application's main class.\"\"\"\n\n\tdef __init__(self) :\n\t\tpass"
		},
		"data" : {}
	}
}
